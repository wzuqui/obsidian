<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://willianluiszuqui.com.br/blog</id>
    <title>Willian Luis Zuqui Blog</title>
    <updated>2023-11-03T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://willianluiszuqui.com.br/blog"/>
    <subtitle>Willian Luis Zuqui Blog</subtitle>
    <icon>https://willianluiszuqui.com.br/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Como recuperar um stash perdido no Git?]]></title>
        <id>https://willianluiszuqui.com.br/blog/git-como-recuperar-um-stash-perdido</id>
        <link href="https://willianluiszuqui.com.br/blog/git-como-recuperar-um-stash-perdido"/>
        <updated>2023-11-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Aprenda como recuperar um stash perdido no Git e restaurar as alterações importantes que você pode ter arquivado.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-encontre-o-stash">1. Encontre o stash<a href="#1-encontre-o-stash" class="hash-link" aria-label="Link direto para 1. Encontre o stash" title="Link direto para 1. Encontre o stash">​</a></h2><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> log --graph --oneline --decorate </span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">git</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">fsck</span><span class="token variable" style="color:#36acaa"> --no-reflog </span><span class="token variable operator" style="color:#393A34">|</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">awk</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'/dangling commit/ {print $3}'</span><span class="token variable" style="color:#36acaa">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><em>Isso mostrará todos os commits nas pontas do seu gráfico de commit que não são mais referenciados por nenhum branch ou tag – cada commit perdido, incluindo cada stash commit que você já criou, estará em algum lugar desse gráfico</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-depois-de-saber-o-hash-do-commit-desejado-você-pode-aplicá-lo-como-um-stash">2. Depois de saber o hash do commit desejado, você pode aplicá-lo como um stash<a href="#2-depois-de-saber-o-hash-do-commit-desejado-você-pode-aplicá-lo-como-um-stash" class="hash-link" aria-label="Link direto para 2. Depois de saber o hash do commit desejado, você pode aplicá-lo como um stash" title="Link direto para 2. Depois de saber o hash do commit desejado, você pode aplicá-lo como um stash">​</a></h2><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> stash apply SEU_WIP_COMMIT_HASH_AQUI</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copiar código para a área de transferência" title="Copiar" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><em><strong>Nota:</strong> A mensagem de commit só estará neste formato (começando com "WIP on") se você não forneceu uma mensagem quando fez git stash.</em></p><p><strong>Fonte:</strong> Veja a resposta completa em <a href="https://stackoverflow.com/a/91795/2510591" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/a/91795/2510591</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-se-o-seu-stash-commit-não-estiver-listado-ou-você-não-o-encontrar-opcional">3. Se o seu stash commit não estiver listado ou você não o encontrar (opcional)<a href="#3-se-o-seu-stash-commit-não-estiver-listado-ou-você-não-o-encontrar-opcional" class="hash-link" aria-label="Link direto para 3. Se o seu stash commit não estiver listado ou você não o encontrar (opcional)" title="Link direto para 3. Se o seu stash commit não estiver listado ou você não o encontrar (opcional)">​</a></h2><p>Se o seu stash já foi aplicado, mas você não o vê, por exemplo, após resolver um conflito ou reiniciar. Siga esses passos:</p><ul><li>Execute <code>bash git fsck --no-reflog | awk '/dangling commit/ {print $3}'</code></li><li>Escolha um hash de commit stash e use <code>git show COMMIT_HASH</code> para examinar o stash commit diff de suas alterações.</li><li>Depois de encontrar suas alterações, basta usar o commit correspondente das alterações do seu stash e aplicá-lo usando <code>git stash apply COMMIT_HASH</code>.</li></ul>]]></content>
        <author>
            <name>Willian Luis Zuqui</name>
            <uri>https://github.com/zuqui</uri>
        </author>
        <category label="git" term="git"/>
        <category label="git-como-recuperar-um-stash-perdido" term="git-como-recuperar-um-stash-perdido"/>
        <category label="stash" term="stash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Diferença entre processamento em lote ou granular]]></title>
        <id>https://willianluiszuqui.com.br/blog/diferenca-entre-processamento-em-lote-ou-granular</id>
        <link href="https://willianluiszuqui.com.br/blog/diferenca-entre-processamento-em-lote-ou-granular"/>
        <updated>2023-09-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Algumas diferenças encontradas com o time de desenvolvimento entre processamento em lote ou granular]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="motivação">Motivação<a href="#motivação" class="hash-link" aria-label="Link direto para Motivação" title="Link direto para Motivação">​</a></h2><p>A motivação deste post é compartilhar algumas diferenças encontradas com o time de desenvolvimento entre processamento em lote ou granular. Com o objetivo de ajudar a entender qual a melhor forma de processar os dados.</p><p>Com o passar do tempo desenvolvendo aplicações <code>workers</code> que são aplicativos que processam dados em segundo plano, percebi que existem duas formas de processar os dados, em lote ou granular, com eles suas vantagens e desvantagens que serão abordadas neste post.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="processamento-em-lote">Processamento em lote<a href="#processamento-em-lote" class="hash-link" aria-label="Link direto para Processamento em lote" title="Link direto para Processamento em lote">​</a></h2><p>O processamento em lote é quando você processa um conjunto de dados de uma vez só, por exemplo, você tem uma lista de 1000 usuários e precisa enviar um e-mail para cada um deles, você pode processar todos de uma vez só, ou seja, em lote.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="processamento-granular">Processamento granular<a href="#processamento-granular" class="hash-link" aria-label="Link direto para Processamento granular" title="Link direto para Processamento granular">​</a></h2><p>O processamento granular é quando você processa um conjunto de dados de forma granular, ou seja, um por um, por exemplo, você tem uma lista de 1000 usuários e precisa enviar um e-mail para cada um deles, você pode processar um por um, ou seja, de forma granular.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tabela-comparativa">Tabela comparativa<a href="#tabela-comparativa" class="hash-link" aria-label="Link direto para Tabela comparativa" title="Link direto para Tabela comparativa">​</a></h2><table><thead><tr><th>Processamento granular</th><th>Processamento em lote</th><th align="center">Vantagem</th></tr></thead><tbody><tr><td>Muito <code>selects</code> executados no banco de dados</td><td>Menos selects executados no banco</td><td align="center">Lote</td></tr><tr><td><code>SQL</code> com menos parâmetros</td><td><code>SQL</code> com acima de 2.100 parâmetros causam erros de execução</td><td align="center">Granular</td></tr><tr><td>Caso aconteça um erro, você pode identificar em qual registro parou sua aplicação</td><td>Perde a <code>transactions</code> inteira do lote</td><td align="center">Granular</td></tr><tr><td>Salva o <code>cursor</code>/<code>posição</code> na qual o registro está seja ele com erro ou sucesso</td><td>O <code>cursor</code> não consegue identificar o real problema, e salva o cursor somente no fim</td><td align="center">Granular</td></tr><tr><td>Conseguimos identificar o tempo de processamento de cada registro</td><td>Conseguimos apenas a média de tempo para cada registro</td><td align="center">Granular</td></tr><tr><td>Menos <code>concorrência</code> e <code>change track</code> no <code>efcore</code></td><td>Mais <code>concorrência</code> gerando mais <code>lock</code> no banco</td><td align="center">Granular</td></tr></tbody></table><blockquote><p>Placar final: Granular 6 x 1 com vantagem para o processamento granular</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusão">Conclusão<a href="#conclusão" class="hash-link" aria-label="Link direto para Conclusão" title="Link direto para Conclusão">​</a></h2><p>Conforme for passando o tempo, e novas experiências forem surgindo, vou atualizando este post com novas informações. Mas por enquanto, a melhor forma de processar os dados é de forma granular.</p>]]></content>
        <author>
            <name>Willian Luis Zuqui</name>
            <uri>https://github.com/zuqui</uri>
        </author>
        <category label="banco-de-dados" term="banco-de-dados"/>
        <category label="change-track" term="change-track"/>
        <category label="concorrencia" term="concorrencia"/>
        <category label="cursor" term="cursor"/>
        <category label="diferenca-entre-processamento-em-lote-ou-granular" term="diferenca-entre-processamento-em-lote-ou-granular"/>
        <category label="efcore" term="efcore"/>
        <category label="granular" term="granular"/>
        <category label="lock lote" term="lock lote"/>
        <category label="select" term="select"/>
        <category label="selects" term="selects"/>
        <category label="sql" term="sql"/>
        <category label="transactions" term="transactions"/>
        <category label="worker" term="worker"/>
        <category label="workers" term="workers"/>
    </entry>
</feed>